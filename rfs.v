
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module rfs (

		output reg [15:0] data_out,
		output reg byte_cnt,
		output reg write_out,

		//////////// CLOCK //////////
		input clk,

		//////////// RESET //////////
		input reset,

		//////////// GPIO, GPIO connect to RFS - RF and Sensor //////////
		inout [35:0] gpio
	);




	//=======================================================
	//  REG/WIRE declarations
	//=======================================================

	assign gpio[19] = txd;
	assign rxd = gpio[18];

	wire rts; // request to send		  
	wire cts; // clear to send
	wire rxd;
	wire txd;
	wire [7:0] uart_data;
	wire rdempty;
	wire write;
	reg read;
	reg cnt;
	
	reg [15:0] buffed_data;
	//=======================================================
	//  Structural coding
	//=======================================================

	// UART Controller
	uart_control UART0(

		.clk(clk),
		.reset_n(~reset),
		// tx
		.write(write),
		.writedata(uart_data),

		// rx
		.read(read),
		.readdata(uart_data),
		.rdempty(rdempty),
		//
		.uart_clk_25m(cnt),
		.uart_tx(txd),
		.uart_rx(rxd)
		
	);

	//read
	always @(posedge clk) begin
		if (~rdempty)
			read <= 1;
		else
			read <= 0;
	end
	
	assign write = ( read & (~rdempty) );

	always @(posedge clk or posedge reset) begin
		write_out <= write;
		if (reset) begin
			buffed_data <= 0;
			byte_cnt <= 0;
		end
		else if (~reset & write) begin
			buffed_data <= {buffed_data[7:0], uart_data};
			byte_cnt <= ~byte_cnt;
		end
	end
	
	always @(negedge byte_cnt)
		data_out = buffed_data;

	always @(posedge clk)
		cnt <= cnt + 1;

endmodule
